// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  role      String   @default("customer")
  createdAt DateTime @default(now())
  vehicles  Vehicle[]
  appointments Appointment[]
  payments  Payment[]
  reviews   Review[]
  adminLogs AdminLog[]
}

model Service {
  id          Int          @id @default(autoincrement())
  name        String
  description String
  price       Float
  createdAt   DateTime     @default(now())
  appointments Appointment[]
  reviews     Review[]
}

model Appointment {
  id            Int        @id @default(autoincrement())
  userId        Int
  serviceId     Int
  appointmentDate DateTime
  status        String     @default("pending")
  createdAt     DateTime   @default(now())
  user          User       @relation(fields: [userId], references: [id])
  service       Service    @relation(fields: [serviceId], references: [id])
  payments      Payment[]  @relation("AppointmentPayment") // Payment has a relation to Appointment
}

model Payment {
  id            Int        @id @default(autoincrement())
  userId        Int
  appointmentId Int
  amount        Float
  paymentMethod String
  paymentStatus String     @default("pending")
  paymentDate   DateTime
  createdAt     DateTime   @default(now())
  user          User       @relation(fields: [userId], references: [id])
  appointment   Appointment @relation("AppointmentPayment", fields: [appointmentId], references: [id]) // Establish the opposite relation
  transactions  PaymentTransaction[] // Add transactions as related to Payment
}


model Vehicle {
  id            Int      @id @default(autoincrement())
  userId        Int
  make          String
  model         String
  year          Int
  licensePlate  String
  createdAt     DateTime @default(now())

  owner         User     @relation(fields: [userId], references: [id])
}

model Review {
  id          Int      @id @default(autoincrement())
  userId      Int
  serviceId   Int
  rating      Int     
  comment     String?
  createdAt   DateTime @default(now())

  user        User     @relation(fields: [userId], references: [id])
  service     Service  @relation(fields: [serviceId], references: [id])
}

model PaymentTransaction {
  id               Int        @id @default(autoincrement())
  paymentId        Int
  transactionId    String
  paymentStatus    String
  createdAt        DateTime   @default(now())
  payment          Payment    @relation(fields: [paymentId], references: [id])

  @@map("payment_transactions")
}




model ServiceCategory {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  createdAt   DateTime @default(now())
}

model AdminLog {
  id          Int      @id @default(autoincrement())
  adminId     Int
  action      String
  description String
  createdAt   DateTime @default(now())

  admin       User     @relation(fields: [adminId], references: [id])
}
